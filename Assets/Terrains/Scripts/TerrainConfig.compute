#pragma kernel ResetBuffers
#pragma kernel RestoreBuffers
#pragma kernel ExportBuffers

#include "TerrainCommon.hlsl"
#include "TerrainProceduralHeight.hlsl"

uint CalculateLogicalIndex(uint x, uint y) {
    return y * (_Size + 1) + x;
}

float2 _Anchor;

// this oeprate per vertex
[numthreads(32, 32, 1)]
void ResetBuffers(uint3 id : SV_DispatchThreadID) {
    
    // Apply Modifiers
    {
        for (uint x = id.x * _MeshSection; x < (id.x + 1) * _MeshSection && x <= _Size; x++) {
    
            for (uint y = id.y * _MeshSection; y <  (id.y + 1) * _MeshSection && y <= _Size; y++) {

                StoreModify(x, y, 0.0, 0.0, 0.0, 0);

                float sample = ProceduralHeight((_Anchor + float2(x, y) / float(_Size) * _Area));
                StoreBase(x, y, sample);
            }
        }
    }
}


struct Export {
    float height;
};
RWStructuredBuffer<Export> _Exports;

// this oeprate per vertex
[numthreads(32, 32, 1)]
void RestoreBuffers(uint3 id : SV_DispatchThreadID) {
    
    // Apply Modifiers
    {
        for (uint x = id.x * _MeshSection; x < (id.x + 1) * _MeshSection && x <= _Size; x++) {
    
            for (uint y = id.y * _MeshSection; y <  (id.y + 1) * _MeshSection && y <= _Size; y++) {
                
                uint index = CalculateLogicalIndex(x, y);
                StoreVertexY(x, y, _Exports[index].height);
                StoreBase(x, y, _Exports[index].height);
            }
        }
    }
}

[numthreads(32, 32, 1)]
void ExportBuffers(uint3 id : SV_DispatchThreadID) {
    
    // Apply Modifiers
    {
        for (uint x = id.x * _MeshSection; x < (id.x + 1) * _MeshSection && x <= _Size; x++) {
    
            for (uint y = id.y * _MeshSection; y <  (id.y + 1) * _MeshSection && y <= _Size; y++) {
                
                uint index = CalculateLogicalIndex(x, y);
                _Exports[index].height = LoadBase(x, y);
            }
        }
    }
}