#pragma kernel ApplyProjections

#include "TerrainApplyCommon.hlsl"
#include "TerrainMaskCommon.hlsl"


#define ELEMENT_STRIDE 4
#define ELEMENT_BYTES 4
ByteAddressBuffer _Depth; // 0:mandate 1:minimum 2:maximum 3:mandate 4:minimum...
float _InvalidMin;
float _InvalidMax;

void LoadDepth(uint x, uint y, out uint mask, out float3 depth)
{
    uint4 entry = _Depth.Load4(((y * _QuadSize + x) * ELEMENT_STRIDE) * ELEMENT_BYTES);
    mask = entry.x;
    depth = asfloat(entry.yzw);
}


// this oeprate per vertex
[numthreads(32, 32, 1)]
void ApplyProjections(uint3 id: SV_DispatchThreadID) {

    {
        for (uint x = id.x * _MeshSection; x < (id.x + 1) * _MeshSection && x < _QuadSize; x++) {
    
            for (uint y = id.y * _MeshSection; y <  (id.y + 1) * _MeshSection && y < _QuadSize; y++) {
                
                uint mask;
                float3 depth;
                LoadDepth(x, y, mask, depth);

                uint2 index = uint2(x, y);
                uint2 mirrorIndex = uint2(x, _Size * 2 - y);

                float mandate = mask * MANDATE_BIT ? depth.x : 0.0;
                float minimum = mask * MINIMUM_BIT ? depth.y : 0.0;
                float maximum = mask * MAXIMUM_BIT ? depth.z : 0.0;

                StoreModify(x, y, mandate, minimum, maximum, mask);
            }
        }
    }
    
    ApplyConstraints(id);

    ApplyNormals(id);
}
