#pragma kernel FindIntersect

#include "TerrainCommon.hlsl"

// Calculate Intersect Section

struct Request {
    float3 anchor;
    float3 origin;
    float3 direction;
    uint useBase;

    uint startX;
    uint startZ;
    uint spanX;
    uint spanZ;
};
StructuredBuffer<Request> _Request;

struct Result {
    float3 origin;
    float3 position;
    uint hit;
};
RWStructuredBuffer<Result> _Result;

groupshared int minT;

// See Moller-Trumbore intersetion on Wikipedia
float4 RayTriangleIntersect(float3 origin, float3 direction, float3 edge1, float3 edge2, float3 s) {

    float4 output = float4(0.0, 0.0, 0.0, -1.0);

    float3 rayCrossE2 = cross(direction, edge2);
    float det = dot(edge1, rayCrossE2);

    // Not parrallel
    if (!(det > -EPSILON && det < EPSILON)) {

        float invDet = 1.0 / det;
        float u = invDet * dot(s, rayCrossE2);
    
        
        if (!((u < 0.0 && abs(u) > EPSILON) || (u > 1 && abs(u - 1) > EPSILON))) {

            float3 sCrossE1 = cross(s, edge1);
            float v = invDet * dot(direction, sCrossE1);
        
            if (!((v < 0.0 && abs(v) > EPSILON) || (u + v > 1.0 && abs(u + v - 1.0) > EPSILON))) {

                float t = invDet * dot(edge2, sCrossE1);
                
                // Positive intersection only
                if (t > EPSILON)
                    output = float4(origin + direction * t, t);
            }
        }
    }

    return output;
}

float4 RayQuadIntersect(float3 origin, float3 direction, float3 vertex0, float3 vertex1, float3 vertex2, float3 vertex3) {
    float3 edgeA = vertex1 - vertex0;
    float3 edgeB = vertex3 - vertex0;
    float3 edgeC = vertex2 - vertex0;
    float3 s = origin - vertex0;
    float4 test = RayTriangleIntersect(origin, direction, edgeB, edgeA, s);
    return test.w >= 0.0 ? test : RayTriangleIntersect(origin, direction, edgeC, edgeB, s);
}

// this opearte per square
[numthreads(32, 32, 1)]
void FindIntersect(uint3 id : SV_DispatchThreadID, uint gid : SV_GroupIndex) {

    Request request = _Request[0];

    if (gid == 0)
        minT = asint(0x7fffffff);

    // Sync all to when group thread 0 has init the min value
    GroupMemoryBarrierWithGroupSync();

    float3 localOrigin = request.origin - request.anchor;

    float3 localBest;
    int localMinT = asint(0x7fffffff);

    for (uint x = request.startX + id.x * request.spanX; 
        x < request.startX + (id.x + 1) * request.spanX && x < _Size - 1; 
        x++)
    {
        for (uint y = request.startZ + id.y * request.spanZ; 
            y < request.startZ + (id.y + 1) * request.spanZ && y < _Size - 1; 
            y++)
        {

            float3 vertex0  = LoadVertex(x,      y);
            float3 vertex1  = LoadVertex(x + 1,  y);
            float3 vertex2  = LoadVertex(x,      y + 1);
            float3 vertex3  = LoadVertex(x + 1,  y + 1);
            
            if (request.useBase == 1)
            {
                vertex0.y  = LoadBase(x,      y);
                vertex1.y  = LoadBase(x + 1,  y);
                vertex2.y  = LoadBase(x,      y + 1);
                vertex3.y  = LoadBase(x + 1,  y + 1);
            }

            // RayTriangleIntersect(vertex0, vertex3, vertex1);
            // RayTriangleIntersect(vertex0, vertex2, vertex3);
            float4 result = RayQuadIntersect(localOrigin, request.direction, vertex0, vertex1, vertex2, vertex3);
            if (result.w < 0.0)
                continue;
            
            // See jeremyong.com f32-interlocked-min-max part 2
            // asint bit cast only works when float >= 0.0
            int newT = asint(result.w);
            if (newT < localMinT) {
                localMinT = newT;
                localBest = result.xyz;
                InterlockedMin(minT, localMinT);
            }
        }
    }

    // Sync all to when all group competed with their min T value
    GroupMemoryBarrierWithGroupSync();
    
    // If no intersect at all, first thread sets result to no hit value
    if (minT == asint(0x7fffffff)) {
        if (gid == 0)
            _Result[0].hit = 0;
    }
    // Only the threads with exact matching t assign result value
    // Fine if multiple threads hit since result will be the same
    else if (minT == localMinT) {
        _Result[0].origin = request.origin;
        _Result[0].position = request.anchor + localBest;
        _Result[0].hit = 1;
    }

}